AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::Serverless-2016-10-31
  - SamPolicyTemplateTranslator
  - S3Objects
  - Yaml2Json
Description: >
  ELBQ20
Parameters:
  KeyName:
    Description: Key used to login into the instance
    Type: AWS::EC2::KeyPair::KeyName
  ImageId:
    Description: "The Image Id (AMI) to use"
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
  VpcId:
    Description: The VpcId
    Type: AWS::EC2::VPC::Id
  Subnets:
    Description: The subnets in which to launch the ELB
    Type: List<AWS::EC2::Subnet::Id>
  WebACLId:
    Description: The WebACL Arn to use
    Type: String
Resources:

  Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete

  ServerJs:
    Type: AWS::S3::Object
    Properties:
      Target:
        Bucket:
          Ref: Bucket
        Key: server.js
        ContentType: application/javascript
      Body: |
        require('express')().get('/', (request, response) => {
          response.send('<html><body>%HOSTNAME%</body></html>');
        }).listen(80, '0.0.0.0');

  PackageJson:
    Type: AWS::S3::Object
    Properties:
      Target:
        Bucket:
          Ref: Bucket
        Key: package.json
        ContentType: application/json
      Body:
        Fn::Yaml2Json:
          dependencies:
            express: "^4.16.1"
            ec2meta: "^1.3.2"

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: True
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          TargetOriginId:
            Ref: LoadBalancer
          ViewerProtocolPolicy: redirect-to-https
        Origins:
          - Id:
              Ref: LoadBalancer
            DomainName:
              Fn::GetAtt: LoadBalancer.DNSName
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        WebACLId:
          Ref: WebACLId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        Ref: Subnets

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /
      Matcher:
        HttpCode: "200"
      Port: 80
      Protocol: HTTP
      VpcId:
        Ref: VpcId

  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      HealthCheckGracePeriod: 120
      HealthCheckType: "ELB"
      LaunchTemplate:
        LaunchTemplateId:
          Ref: LaunchTemplate
        Version:
          Fn::GetAtt: LaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      TargetGroupARNs:
        - Ref: TargetGroup
      VPCZoneIdentifier:
        Ref: Subnets

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - S3CrudPolicy:
            BucketName:
              Ref: Bucket

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: EC2InstanceRole

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn:
            Fn::GetAtt: InstanceProfile.Arn
        ImageId:
          Ref: ImageId
        InstanceType: t2.micro
        KeyName:
          Ref: KeyName
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: PLATFORM
                Value: ARCHITECTURE_LABS
              - Key: Name
                Value: ELBQ20-Instance
          - ResourceType: volume
            Tags:
              - Key: PLATFORM
                Value: ARCHITECTURE_LABS
              - Key: Name
                Value: ELBQ20-Instance-VolumeRoot
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/bash
              yum update -y
              yum install -y gcc-c++ make
              curl -sL https://rpm.nodesource.com/setup_lts.x | sudo -E bash -
              yum install -y nodejs
              echo "Node $(node -v)"
              echo "Npm $(npm -v)"
              # Copy s3 content...
              mkdir -p /var/www/html
              cd /var/www/html
              aws s3 cp --recursive s3://${Bucket} .
              npm install
              sed -i -e "s/%HOSTNAME%/$(ec2-metadata --public-hostname)/" server.js
              node server.js &


Outputs:
  Bucket:
    Description: The Bucket
    Value: 
      Ref: Bucket

  Distribution:
    Description: The Distribution
    Value: 
      Ref: Distribution

  DistributionDomainName:
    Description: The Distribution DomainName
    Value: 
      Fn::GetAtt: Distribution.DomainName

  LoadBalancerDNSName:
    Description: The LoadBalancer DNSName
    Value: 
      Fn::GetAtt: LoadBalancer.DNSName
