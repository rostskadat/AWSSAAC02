AWSTemplateFormatVersion: '2010-09-09'
Transform: 
  - AWS::Serverless-2016-10-31
  - SamPolicyTemplateTranslator
Description: >
  FileGatewayOnEC2. Showcase a FileGateway on EC2 with an EC2 Client
Metadata:
  AWS::ServerlessRepo::Application:
    Name: "StorageGateway-FileGatewayOnEC2"
    Description: Showcase a FileGateway on EC2 with an EC2 Client
    Author: rostskadat
    SpdxLicenseId: Apache-2.0
    ReadmeUrl: README.md
    Labels: [ "SAPC01", "StorageGateway" ]
    HomePageUrl: https://github.com/rostskadat
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/rostskadat

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Parameters related to EC2
        Parameters:
          - VpcId
          - SubnetIds
          - FileGatewayImageId

Parameters:

  VpcId:
    Description: The VPC for the StorageGatewayVPCEndpoint (BUILD_VPC)
    Type: AWS::EC2::VPC::Id
    Default: "vpc-0ae657c991867629c"

  SubnetIds:
    Description: The Subnets in the VPC (BUILD_VPC/PRIVATE_AZA)
    Type: List<AWS::EC2::Subnet::Id>
    Default: "subnet-07cddf728023f9c5d"

  SecurityGroupIds:
    Description: The SecurityGroup in the VPC (BUILD_VPC/SecurityGroupPrivate)
    Type: List<AWS::EC2::SecurityGroup::Id>
    Default: sg-016e247c544181029

  ManagedPolicyArns:
    Description: The list of Policies to attach to the EC2Instance Profile
    Type: String
    Default: "arn:aws:iam::aws:policy/PowerUserAccess"

  # Look up the actual parameter name with the command:
  # ?> aws ssm get-parameters-by-path --recursive --path "/aws/service/storagegateway/ami/"
  FileGatewayImageId:
    Description: "The Image Id (AMI) to use for the FileGateway"
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/storagegateway/ami/FILE_S3/latest"

  CachedGatewayImageId:
    Description: "The Image Id (AMI) to use for the CachedGateway"
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/storagegateway/ami/CACHED/latest"

  StoredGatewayImageId:
    Description: "The Image Id (AMI) to use for the StoredGateway"
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/storagegateway/ami/STORED/latest"

  ClientImageId:
    Description: "The Image Id (AMI) to use"
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

  VncPassword:
    Description: "The VNC Password"
    Type: "String"
    Default: "y4ipAEt8"

Resources:

#  S3VPCEndpoint:
#    Type: AWS::EC2::VPCEndpoint
#    Properties: 
#      ServiceName: 
#        Fn::Sub: com.amazonaws.${AWS::Region}.s3
#      VpcId: 
#        Ref: VpcId

  StorageGatewayVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      PrivateDnsEnabled: true
      SecurityGroupIds: 
        Ref: SecurityGroupIds
      ServiceName: 
        Fn::Sub: com.amazonaws.${AWS::Region}.storagegateway
      SubnetIds: 
        Ref: SubnetIds
      VpcEndpointType: Interface
      VpcId: 
        Ref: VpcId

  Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      Tags:
        - Key: PLATFORM
          Value: SAPC01

  # GatewayType: FILE_S3
  FileGatewayInstance:
    Type: AWS::Serverless::Application
    DeletionPolicy: Delete
    DependsOn: 
      - StorageGatewayVPCEndpoint
#      - S3VPCEndpoint
    Properties:
      Location: ../../SamApplications/EC2Instance/template.yaml
      Parameters:
        CreateInstance: true
        # File Gateway require one for cache
        ExtraVolume1: 'ebs'
        ImageId:
          Ref: FileGatewayImageId
        InstanceType: m4.xlarge
        IsPublic: false
        ManagedPolicyArns: 
          Ref: ManagedPolicyArns
        VolumeSize: 200
        ParentStackName:
          Ref: AWS::StackName
        SubnetId: 
          Fn::Select:
            - 0 
            - Ref: SubnetIds
        SecurityGroupIds:
          Fn::Join:
            - ","
            - Ref: SecurityGroupIds

  # GatewayType: CACHED 
  CachedGatewayInstance:
    Type: AWS::Serverless::Application
    DeletionPolicy: Delete
    DependsOn: 
      - StorageGatewayVPCEndpoint
    Properties:
      Location: ../../SamApplications/EC2Instance/template.yaml
      Parameters:
        CreateInstance: true
        # Volume Gateway require one for upload and one for cache
        ExtraVolume1: 'ebs'
        ExtraVolume2: 'ebs'
        ImageId:
          Ref: CachedGatewayImageId
        InstanceType: m4.xlarge
        IsPublic: false
        ManagedPolicyArns: 
          Ref: ManagedPolicyArns
        VolumeSize: 200
        SubnetId: 
          Fn::Select:
            - 0 
            - Ref: SubnetIds
        SecurityGroupIds:
          Fn::Join:
            - ","
            - Ref: SecurityGroupIds
        ParentStackName:
          Ref: AWS::StackName

  # You can run only file, cached volume, and tape gateways on an Amazon EC2 instance.
  # GatewayType: STORED: NOT IMPLEMENTED

  FileGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Role to allow StorageGateway to access the S3 Bucket
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Principal:
              Service: storagegateway.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
      # As per https://docs.aws.amazon.com/storagegateway/latest/userguide/managing-gateway-file.html#grant-access-s3
      - PolicyName: AllowAccessToS3
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: "Allow"
              Action:
                - s3:GetAccelerateConfiguration
                - s3:GetBucketLocation
                - s3:GetBucketVersioning
                - s3:ListBucket
                - s3:ListBucketVersions
                - s3:ListBucketMultipartUploads
              Resource: 
                Fn::Sub: "${Bucket.Arn}"
            - Effect: Allow
              Action:
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectVersion
                - s3:ListMultipartUploadParts
                - s3:PutObject
                - s3:PutObjectAcl
              Resource:
                - Fn::Sub: "${Bucket.Arn}/*"

  Client:
    Type: AWS::Serverless::Application
    Properties:
      Location: ../../SamApplications/SimpleDesktop/template.yaml
      Parameters:
        ParentStackName:
          Ref: AWS::StackName
        ImageId:
          Ref: ClientImageId
        IsPublic: false
        ManagedPolicyArns:
          Ref: ManagedPolicyArns
        VncPassword:
          Ref: VncPassword
        SubnetId: 
          Fn::Select:
            - 0 
            - Ref: SubnetIds
        SecurityGroupIds:
          Fn::Join:
            - ","
            - Ref: SecurityGroupIds

Outputs:

  Bucket:
    Description: The Bucket
    Value: 
      Ref: Bucket

  BucketArn:
    Description: The Bucket
    Value: 
      Fn::GetAtt: Bucket.Arn

  StorageGatewayVPCEndpoint:
    Description: The StorageGatewayVPCEndpoint
    Value: 
      Fn::Select:
        - 1 
        - Fn::Split:
          - ':'
          - Fn::Select:
            - 0
            - Fn::GetAtt: StorageGatewayVPCEndpoint.DnsEntries

  FileGatewayInstance:
    Description: The FileGatewayInstance
    Value: 
      Fn::GetAtt: FileGatewayInstance.Outputs.InstancePrivateIp

  CachedGatewayInstance:
    Description: The CachedGatewayInstance
    Value: 
      Fn::GetAtt: CachedGatewayInstance.Outputs.InstancePrivateIp

  Client:
    Description: The Client
    Value: 
      Fn::GetAtt: Client.Outputs.InstancePrivateIp

  FileGatewayRole:
    Description: The FileGatewayRole
    Value:
      Fn::GetAtt: FileGatewayRole.Arn      