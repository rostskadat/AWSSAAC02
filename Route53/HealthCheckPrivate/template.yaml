AWSTemplateFormatVersion: '2010-09-09'
Transform: 
  - AWS::Serverless-2016-10-31
  - Yaml2Json
Description: >
  HealthCheckPrivate. Showcase how to have a Route53 Health Check based on the health of a private resource.
Metadata:
  AWS::ServerlessRepo::Application:
    Name: Route53-HealthCheckPrivate
    Description: Showcase how to have a Route53 Health Check based on the health of a private resource.
    Author: rostskadat
    SpdxLicenseId: Apache-2.0
    ReadmeUrl: README.md
    Labels: ["SAPC01"]
    HomePageUrl: https://github.com/rostskadat
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/rostskadat

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Parameters related to Route53 and ELB
        Parameters:
          - S3HostedZoneId
          - HostedZoneName
          - SubDomainName
          - CertificateArn
      - Label:
          default: Parameters related to AutoScalingGroup
        Parameters:
          - VpcId
          - Subnets
          - FlaskPort
          
Parameters:

  S3HostedZoneId:
    Description: Look at https://docs.aws.amazon.com/general/latest/gr/s3.html#s3_website_region_endpoints
    Type: String
    Default: Z1BKCTXD74EZPE

  HostedZoneName:
    Description: "The hosted zone name"
    Type: String
    Default: domain.com

  SubDomainName:
    Description: "The subdomain of the API"
    Type: String
    Default: sapc01-healthcheckprivate

  CertificateArn:
    Description: "The ACM certificate Arn. Must be valid in the current region."
    Type: String
    Default: "arn:aws:acm:eu-west-1:123456789012:certificate/12345678-1234-1234-1234-123456789012"

  VpcId:
    Description: "The VPC in which to put the load balancer"
    Type: AWS::EC2::VPC::Id
    Default: vpc-9e9b9ffa

  Subnets:
    Description: "The subnet in which to start the instances"
    Type: List<AWS::EC2::Subnet::Id>
    Default: "subnet-b09099d4,subnet-f76b6581,subnet-58421700"

  FlaskPort:
    Description: "The Port on which the Flask app is listening on"
    Type: Number
    Default: 80

Globals:
  Function:
    Handler: app.lambda_handler
    Runtime: python3.8
    Timeout: 30
    Layers:
      - Ref: "HealthCheckPrivateLayer01"
    Tags:
      PLATFORM: SAPC01

Resources:

  RecordSet:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: 
        # NOTE: the final dot
        Fn::Sub: "${HostedZoneName}."
      Comment: "Failover DNS name with alarm on private resource"
      RecordSets:
        # NOTE: the bucket name is the same as the RecordSet
        - Name: 
            Fn::Sub: "${SubDomainName}.${HostedZoneName}"
          AliasTarget: 
            EvaluateTargetHealth: true
            HostedZoneId: 
              Fn::GetAtt: LoadBalancer.CanonicalHostedZoneID
            DNSName: 
              Fn::GetAtt: LoadBalancer.DNSName
          Failover: PRIMARY 
          HealthCheckId:
            Ref: HealthCheck
          SetIdentifier: PRIMARY
          Type: A
        - Name: 
            Fn::Sub: "${SubDomainName}.${HostedZoneName}"
          AliasTarget: 
            DNSName: 
              Fn::Sub: s3-website-${AWS::Region}.amazonaws.com
            HostedZoneId: 
              Ref: S3HostedZoneId
          Failover: SECONDARY 
          SetIdentifier: SECONDARY
          Type: A

  HealthCheck: 
    Type: AWS::Route53::HealthCheck
    Properties: 
      HealthCheckConfig: 
        Type: CLOUDWATCH_METRIC
        AlarmIdentifier:
          Name:
            Ref: FailoverAlarm
          Region: 
            Ref: AWS::Region
      HealthCheckTags: 
        - Key: PLATFORM
          Value: SAPC01
        - Key: Name
          Value: 
            Fn::Sub: "${AWS::StackName}-HealthCheck"

  FailoverAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm monitored by Route53 healthcheck
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Namespace: 
        Fn::Sub: ${AWS::StackName}
      MetricName: Failover
      Period: 60
      Statistic: SampleCount
      Threshold: 3
      TreatMissingData: notBreaching

  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName:
        Fn::Sub: '${AWS::StackName}-FailoverAlarm'
      DashboardBody:
        Fn::Sub:
          Fn::Yaml2Json:
            widgets:
              - type: metric
                x: 0
                y: 0
                width: 24
                height: 15
                properties:
                  metrics:
                    - - ${AWS::StackName}
                      - Failover
                  view: timeSeries
                  stacked: false
                  region: ${AWS::Region}
                  stat: SampleCount
                  period: 60
                  yAxis:
                    left:
                      min: 0
                      max: 5
                  annotations:
                    horizontal:
                    - label: Alarm
                      value: 3
                      fill: above
                  title: Alarm state for Failover Metric

  #
  # This is the main infrastructure. It just serves a simple Flask application
  #
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        Ref: Subnets
      Type: application
      Tags: 
        - Key: PLATFORM
          Value: SAPC01

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      HealthCheckPath: /health
      Matcher:
        HttpCode: '200-299'
      Tags:
        - Key: PLATFORM
          Value: SAPC01
      TargetType: instance
      VpcId:
        Ref: VpcId

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: 
            Ref: CertificateArn
      DefaultActions:
      - TargetGroupArn:   
          Ref: TargetGroup
        Type: forward
      LoadBalancerArn: 
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP

  EC2Instance:
    Type: AWS::Serverless::Application
    Properties:
      Location: ../../SamApplications/EC2Instance/template.yaml
      Parameters:
        CreateInstance: false
        ParentStackName:
          Ref: AWS::StackName
        UserData: 
          Fn::Sub: |
            #!/bin/bash
            yum-config-manager --enable epel ; 
            yum update -y ; 
            yum install -y python3 python3-pip
            pip3 --disable-pip-version-check install gunicorn==20.0.4 Flask==1.1.2 Flask-Cors==3.0.10
            mkdir /flask-hello-world
            cat > /flask-hello-world/app.py <<EOF
            import datetime, flask, flask_cors, json, logging, os
            app = flask.Flask(__name__)
            flask_cors.CORS(app)
            gunicorn_error_logger = logging.getLogger('gunicorn.error')
            app.logger.handlers.extend(gunicorn_error_logger.handlers)
            app.logger.setLevel(logging.DEBUG)
            app.logger.debug('Welcome to Flask')
            @app.route('/')
            def render_index():
              headers = list(map(lambda i: {i[0]:i[1]}, flask.request.headers ))
              created_at = datetime.datetime.utcnow().strftime("%Y-%m-%d'T'%H:%M:%S")
              return json.dumps({ "created_at": created_at, "headers": headers })
            @app.route('/health')
            def render_health():
              return "OK"
            if __name__ == '__main__':
              app.run(debug=True, host='0.0.0.0', port=${FlaskPort})
            EOF
            cd /flask-hello-world && /usr/local/bin/gunicorn --bind 0.0.0.0:${FlaskPort} --log-file /var/log/gunicorn.log --log-level DEBUG --daemon app:app
            echo "Instance initialization... Done"

  AutoScalingGroup: 
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB
      LaunchTemplate: 
        LaunchTemplateId:
          Fn::GetAtt: EC2Instance.Outputs.LaunchTemplateId
        Version:
          Fn::GetAtt: EC2Instance.Outputs.LaunchTemplateVersion
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupInServiceInstances
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      Tags: 
        - Key: PLATFORM
          Value: SAPC01
          PropagateAtLaunch: true
        - Key: ScalingStrategy
          Value: Target
          PropagateAtLaunch: true
      TargetGroupARNs: 
        - Ref: TargetGroup
      VPCZoneIdentifier:
        Ref: Subnets

  ScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: 
        Ref: AutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 1

  FailoverWebSite:
    Type: AWS::Serverless::Application
    Properties:
      Location: ../../SamApplications/StaticWebSite/template.yaml
      Parameters:
        # NOTE: the bucket name is the same as the RecordSet
        BucketName: 
          Fn::Sub: "${SubDomainName}.${HostedZoneName}"
        IndexBody:
          <html lang="en">
            <head><title>FailoverWebSite</title></head>
            <body>
              <div>
                <h1>Welcome to the Failover WebSite!</h1>
                <p>You see this page because the Alarm was raise on the Route53 record</p>
              </div>
            </body>
          </html>

Outputs:
  WebSite:
    Description: The main website Url
    Value: 
      Fn::Sub: "https://${SubDomainName}.${HostedZoneName}"

  FailoverWebSite:
    Description: The FailoverWebSite Url
    Value: 
      Fn::GetAtt: FailoverWebSite.Outputs.BucketWebsiteURL

  AlarmNamespace:
    Description: The Namespace of the CloudWatch::Alarm Failover
    Value:
      Ref: AWS::StackName
