USE dev;

CREATE TABLE items (
     id MEDIUMINT NOT NULL AUTO_INCREMENT,
     description VARCHAR(1024),
     createdAt TIMESTAMP DEFAULT NOW(),
     PRIMARY KEY (id)
);

-- A function that return some random string...
DELIMITER $$
DROP FUNCTION IF EXISTS `RANDSTRING` $$
CREATE DEFINER=`root`@`%` FUNCTION `RANDSTRING`(length SMALLINT(3)) RETURNS VARCHAR(1024) CHARSET utf8
begin
    SET @returnStr = '';
    SET @allowedChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    SET @i = 0;

    WHILE (@i < length) DO
        SET @returnStr = CONCAT(@returnStr, substring(@allowedChars, FLOOR(RAND() * LENGTH(@allowedChars) + 1), 1));
        SET @i = @i + 1;
    END WHILE;

    RETURN @returnStr;
END $$

DROP PROCEDURE IF EXISTS `BUSYLOOP` $$
CREATE DEFINER=`root`@`%` PROCEDURE `BUSYLOOP`(MAX_LOOPS SMALLINT(3))
BEGIN
    -- The idea is to bump the CPU to the roof, in order to trigger a scaling
	DECLARE max_count  INT;
	DECLARE i  INT;
	DECLARE j  INT;
	DECLARE description VARCHAR(1024);
	SET i = 0;
    SELECT COUNT(1) INTO max_count FROM items;
    outer_loop: LOOP
        IF  i >= MAX_LOOPS THEN 
			LEAVE  outer_loop;
		END  IF;
        SET  i = i + 1;
    	SET j = 1;
	    inner_label:  LOOP
		    IF  j > max_count THEN 
			    LEAVE  inner_label;
		    END  IF;
		    SET  j = j + 1;
            SELECT description INTO description FROM items WHERE ID = j;
            ITERATE  inner_label;
	    END LOOP;
        ITERATE outer_loop;
    END LOOP;
	SELECT i;
END$$
DELIMITER ;

-- Insert a couple of rows (a million or so)...
INSERT INTO
    items (description)
SELECT
    RANDSTRING(1024)
FROM (
    SELECT 
        1 + a.N + b.N * 10 + c.N * 100 + d.N * 1000 + e.N * 10000 + f.N * 100000 AS n
    FROM
        (SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) a
       ,(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) b
       ,(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) c
       ,(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) d
       ,(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) e
       ,(SELECT 0 AS N UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9) f
    ORDER BY n
) t;

COMMIT;