AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::Serverless-2016-10-31
  - Yaml2Json
Description: >
  Saml2Sp. Showcase the use of SAML to connect a SP and an IDP
Metadata:
  AWS::ServerlessRepo::Application:
    Name: "IAM-Saml2Sp"
    Description: Showcase the use of SAML to connect a SP and an IDP
    Author: rostskadat
    SpdxLicenseId: Apache-2.0
    ReadmeUrl: README.md
    Labels: ["SAPC01", "IAM"]
    HomePageUrl: https://github.com/rostskadat
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/rostskadat

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Parameters related to Route53
        Parameters:
          - HostedZoneName
          - SubDomainName
          - CertificateArn
      - Label:
          default: Parameters related to VPC
        Parameters:
          - VpcId
          - Subnets
          - SecurityGroups
      - Label:
          default: Parameters related to ECS
        Parameters:
          - ContainerImageRepository
          - ApplicationName
          - ApplicationContainerPort

Parameters:
  HostedZoneName:
    Description: "The hosted zone name"
    Type: String
    Default: domain.com

  SubDomainName:
    Description: "The subdomain of the API"
    Type: String
    Default: sapc01-oidc

  CertificateArn:
    Description: "THe ACM Certificate Arn"
    Type: String
    Default: "arn:aws:acm:eu-west-1:123456789012:certificate/12345678-1234-1234-1234-123456789012"

  VpcId:
    Description: "The VPC in which to put the load balancer"
    Type: AWS::EC2::VPC::Id
    Default: vpc-9e9b9ffa

  PublicSubnets:
    Description: "The Subnets in which to put the load balancer"
    Type: List<AWS::EC2::Subnet::Id>
    Default: "subnet-b09099d4,subnet-f76b6581"

  PrivateSubnets:
    Description: "The Subnets in which to put the load balancer"
    Type: List<AWS::EC2::Subnet::Id>
    Default: "subnet-061b4aea8122da878,subnet-02df09930032b188a"

  SecurityGroups:
    Description: "The SecurityGroups to associate with the containers"
    Type: List<AWS::EC2::SecurityGroup::Id>
    Default: "sg-e1435287"

  ContainerImageRepository:
    Description: "The name of the ECR Repository where you uploaded your docker image"
    Type: String

  ApplicationName:
    Description: "The name of the  application"
    Type: String
    Default: flask-idp

  ApplicationContainerPort:
    Description: "The port on which the  application is listening"
    Type: Number
    Default: 8088

Resources:

  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        HostedZoneId:
          Fn::GetAtt: LoadBalancer.CanonicalHostedZoneID
        DNSName:
          Fn::GetAtt: LoadBalancer.DNSName
      HostedZoneName:
        # NOTE: the final dot
        Fn::Sub: "${HostedZoneName}."
      Name:
        Fn::Sub: "${SubDomainName}-idp.${HostedZoneName}"
      Type: A

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        Ref: PublicSubnets
      Type: application
      Tags:
        - Key: PLATFORM
          Value: SAPC01

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /health
      Port:
        Ref: ApplicationContainerPort
      Protocol: HTTP
      Tags:
        - Key: PLATFORM
          Value: SAPC01
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 5
      TargetType: ip
      VpcId:
        Ref: VpcId

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn:
            Ref: CertificateArn
      DefaultActions:
        - TargetGroupArn:
            Ref: TargetGroup
          Type: forward
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 443
      Protocol: HTTPS

  RedirectListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: 443
            Protocol: HTTPS
            Query: "#{query}"
            StatusCode: HTTP_302
          Type: redirect
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: 80
      Protocol: HTTP

  #
  # ECS CONFIGURATION
  #
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: PLATFORM
          Value: SAPC01

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: "/${AWS::AccountId}/ecs/${AWS::StackName}"
      RetentionInDays: 1

  QueryDefinition:
    Type: AWS::Logs::QueryDefinition
    Properties:
      LogGroupNames:
        - Ref: LogGroup
      Name: GetServerStarting
      QueryString: |
        # This query look for the server startup trace...
        filter @message like /Server starting./
        | fields @timestamp, @message
        | sort @timestamp desc
        | limit 20

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        # To allow interacting directly with the container through the SSM session manager
        # as per https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html
        - PolicyName: AllowSSMExecuteCommandAgent
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: "*"

  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancer
    Properties:
      Cluster:
        Ref: Cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      # To allow interacting directly with the container through the SSM session manager
      # as per https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html
      EnableExecuteCommand: true
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName:
            Ref: ApplicationName
          ContainerPort:
            Ref: ApplicationContainerPort
          TargetGroupArn:
            Ref: TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            Ref: SecurityGroups
          Subnets:
            Ref: PrivateSubnets
      PropagateTags: SERVICE
      Tags:
        - Key: PLATFORM
          Value: SAPC01
      TaskDefinition:
        Ref: TaskDefinition

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name:
            Ref: ApplicationName
          Environment:
            # The idp.py does not read the  url from the generated xml file
            # but uses the value dynamically read from idp_conf.py. If we do not
            # set it, the app will think that it serves "http://localhost:8088/"
            - Name: IS_DOCKERISED
              Value: true
            - Name: IDP_URL_BASE
              Value:
                Fn::Sub: "https://${RecordSet}"
          Image:
            Fn::Sub: "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ContainerImageRepository}:latest"
          LinuxParameters:
            # This allows to use the ssm execute-command as per https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html
            InitProcessEnabled: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region:
                Fn::Sub: "${AWS::Region}"
              awslogs-group:
                Ref: LogGroup
              awslogs-stream-prefix:
                Ref: ApplicationName
          PortMappings:
            # As per documentation "NetworkMode: awsvpc" implies no HostPort
            - ContainerPort:
                Ref: ApplicationContainerPort
          Essential: true
      Cpu: 256
      Memory: 512
      ExecutionRoleArn:
        Fn::GetAtt: ExecutionRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: PLATFORM
          Value: SAPC01
      # Required to interacting directly with the container through the SSM session manager
      # as per https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-exec.html
      TaskRoleArn:
        Fn::GetAtt: TaskRole.Arn

Outputs:
  RecordSetUrl:
    Description: The RecordSet Url
    Value:
      Fn::Sub: https://${RecordSetUrl}

  LoadBalancer:
    Description: The LoadBalancer
    Value:
      Ref: LoadBalancer

  Cluster:
    Description: The Cluster
    Value:
      Ref: Cluster

  Service:
    Description: The Service
    Value:
      Fn::GetAtt: Service.Name
