AWSTemplateFormatVersion: '2010-09-09'
Transform: 
  - AWS::Serverless-2016-10-31
  - Yaml2Json
Description: >
  Microservice. Showcase the use of ECS in a Microservice Architecture
Metadata:

  AWS::ServerlessRepo::Application:
    Name: flask-hello-world-microservice
    Description: Microservice. Showcase the use of ECS in a Microservice Architecture
    Author: rostskadat
    SpdxLicenseId: Apache-2.0
    ReadmeUrl: README.md
    Labels: [ 'SAPC01' ]
    HomePageUrl: https://github.com/rostskadat
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/rostskadat

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Parameters related to Route53
        Parameters:
          - HostedZoneName
          - SubDomainName
          - CertificateArn
      - Label:
          default: Parameters related to VPC
        Parameters:
          - VpcId
          - PublicSubnets
          - SecurityGroups
      - Label:
          default: Parameters related to ECS
        Parameters:
          - ContainerImageRepository
          - ApplicationName
          - ApplicationContainerPort

Parameters:

  HostedZoneName:
    Description: "The hosted zone name"
    Type: String
    Default: domain.com

  SubDomainName:
    Description: "The subdomain of the API"
    Type: String
    Default: sapc01-ecsmicroservice

  CertificateArn:
    Description: "THe ACM Certificate Arn"
    Type: String
    Default: "arn:aws:acm:eu-west-1:123456789012:certificate/12345678-1234-1234-1234-123456789012"
      
  VpcId:
    Description: "The VPC in which to put the load balancer"
    Type: AWS::EC2::VPC::Id
    Default: vpc-9e9b9ffa

  PublicSubnets:
    Description: "The Subnets in which to put the load balancer"
    Type: List<AWS::EC2::Subnet::Id>
    Default: "subnet-b09099d4,subnet-f76b6581,subnet-58421700"

  SecurityGroups:
    Description: "The SecurityGroups to associate with the containers"
    Type: List<AWS::EC2::SecurityGroup::Id>
    Default: "sg-e1435287"

  ContainerImageRepository:
    Description: "The name of the ECR Repository where you uploaded your docker image"
    Type: String

  ApplicationName:
    Description: "The name of the application"
    Type: String
    Default: flask-hello-world

  ApplicationContainerPort:
    Description: "The port on which the application is listening"
    Type: Number
    Default: 5000

Resources:

  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        HostedZoneId: 
          Fn::GetAtt: LoadBalancer.CanonicalHostedZoneID
        DNSName: 
          Fn::GetAtt: LoadBalancer.DNSName
      HostedZoneName: 
        # NOTE: the final dot
        Fn::Sub: "${HostedZoneName}."
      Name: 
        Fn::Sub: "${SubDomainName}.${HostedZoneName}"
      Type: A

  #
  # ALB CONFIGURATION
  #
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        Ref: PublicSubnets
      Type: application
      Tags: 
        - Key: PLATFORM
          Value: SAPC01

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /health
      Port: 
        Ref: ApplicationContainerPort
      Protocol: HTTP
      Tags:
        - Key: PLATFORM
          Value: SAPC01
      TargetType: ip
      VpcId:
        Ref: VpcId

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: 
            Ref: CertificateArn
      DefaultActions:
      - TargetGroupArn:   
          Ref: TargetGroup
        Type: forward
      LoadBalancerArn: 
        Ref: LoadBalancer
      Port: 443
      Protocol: HTTPS

  # 
  # ECS CONFIGURATION
  #
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders:
        - FARGATE
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: PLATFORM
          Value: SAPC01

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: "/${AWS::AccountId}/ecs/${AWS::StackName}"
      RetentionInDays: 1

  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancer
    Properties:
      Cluster: 
        Ref: Cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: 
            Ref: ApplicationName
          ContainerPort: 
            Ref: ApplicationContainerPort
          TargetGroupArn: 
            Ref: TargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration: 
          AssignPublicIp: DISABLED
          SecurityGroups: 
            Ref: SecurityGroups
          Subnets:
            Ref: PublicSubnets
      PropagateTags: SERVICE
      ServiceRegistries:
        - ContainerName: 
            Ref: ApplicationName
          RegistryArn: 
            Fn::GetAtt: PrivateRegisteredService.Arn
      Tags:
        - Key: PLATFORM
          Value: SAPC01
      TaskDefinition: 
        Ref: TaskDefinition

  ExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: 
            Ref: ApplicationName
          Image:
            Fn::Sub: "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ContainerImageRepository}:latest"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region:
                Fn::Sub: "${AWS::Region}"
              awslogs-group:
                Ref: LogGroup
              awslogs-stream-prefix: 
                Ref: ApplicationName
          PortMappings:
            # As per documentation "NetworkMode: awsvpc" implies no HostPort
            - ContainerPort: 
                Ref: ApplicationContainerPort
          Essential: true
          MountPoints:
            - SourceVolume: ephemeral
              ContainerPath: /ephemeral
        - Name: busybox
          Image: busybox
          EntryPoint:
            - sh
            - '-c'
          Command:
            - /bin/sh -c "while true ; do /bin/date > /ephemeral/date ; sleep 1 ; done"
          Essential: false
          VolumesFrom:
            - SourceContainer: 
                Ref: ApplicationName
      Cpu: 256
      Memory: 512
      ExecutionRoleArn:
        Fn::GetAtt: ExecutionRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: PLATFORM
          Value: SAPC01
      Volumes:
        - Name: ephemeral
          Host: {}

  #
  # SERVICE DISCOVERY CONFIGURATION
  #
  PrivateDnsNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Description: AWS Cloud Map private DNS namespace for resources for example.com website
      Vpc: 
        Ref: VpcId
      Name: 
        Fn::Sub: internal-${HostedZoneName}

  PrivateRegisteredService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Description: Service based on a public DNS namespace
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
        RoutingPolicy: WEIGHTED
#      HealthCheckConfig:
#        FailureThreshold: 3
#        ResourcePath: /health
#        Type: HTTP
      Name: 
        Ref: ApplicationName
      NamespaceId: 
        Ref: PrivateDnsNamespace
      Tags:
        - Key: PLATFORM
          Value: SAPC01

  #
  # AUTOSCALING CONFIGURATION
  # 
  # Description: we use a Target Scaling policy that target a 75% CPU 
  #   utilization. Please note that this only work if we use the busy loop
  #   in the container itself.
  #
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      RoleARN: 
        Fn::Sub: "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/custom-resource.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_CustomResource"
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      ResourceId: 
        Fn::Sub: service/${Cluster}/${Service.Name}

  TargetTrackingScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: cpu75-target-tracking-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: 
        Ref: ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 75.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  #
  # TESTING AND DASHBOARD CONFIGURATION:
  #
  # We create an EC2 Instance in which you can launch the flood command and
  # also a CloudWatch Dashboard that makes it a bit more palatable...
  #
  EC2Instance:
    Type: AWS::Serverless::Application
    DependsOn: Service
    Properties:
      Location: ../../SamApplications/EC2Instance/template.yaml
      Parameters:
        ParentStackName: 
          Ref: AWS::StackName

  Dashboard: 
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: 
        Fn::Sub: '${AWS::StackName}'
      DashboardBody: 
        Fn::Sub:
          Fn::Yaml2Json:
            widgets:
            - type: metric
              x: 0
              y: 0
              width: 6
              height: 9
              properties:
                metrics:
                - - AWS/EC2
                  - CPUUtilization
                  - InstanceId
                  - ${EC2Instance.Outputs.InstanceId}
                  - label: ${EC2Instance.Outputs.InstanceId}
                view: timeSeries
                stat: Average
                period: 60
                stacked: true
                region: ${AWS::Region}
                yAxis:
                  left:
                    min: 0
                    max: 100
                title: EC2 CPU utilization (%)
            - type: metric
              x: 6
              y: 0
              width: 6
              height: 9
              properties:
                metrics:
                - - ECS/ContainerInsights
                  - CpuUtilized
                  - ClusterName
                  - ${Cluster}
                view: timeSeries
                stacked: false
                region: ${AWS::Region}
                period: 60
                stat: Average
                title: Cluster CPU utilization
                yAxis:
                  left:
                    min: 0
                    label: ''
                  right:
                    showUnits: false
            - type: metric
              x: 12
              y: 0
              width: 6
              height: 9
              properties:
                metrics:
                - - ECS/ContainerInsights
                  - MemoryUtilized
                  - ClusterName
                  - ${Cluster}
                  - color: "#d62728"
                view: timeSeries
                stacked: false
                region: ${AWS::Region}
                period: 60
                stat: Average
                title: Cluster Memory utilization (MB)
            - type: metric
              x: 18
              y: 0
              width: 6
              height: 9
              properties:
                metrics:
                - - ECS/ContainerInsights
                  - ContainerInstanceCount
                  - ClusterName
                  - ${Cluster}
                - - "."
                  - ServiceCount
                  - "."
                  - "."
                - - "."
                  - TaskCount
                  - "."
                  - "."
                view: timeSeries
                stacked: false
                region: ${AWS::Region}
                period: 60
                stat: Average
                title: Counts
                yAxis:
                  left:
                    min: 0

Outputs: 

  RecordSetUrl:
    Description: The RecordSet Url
    Value: 
      Fn::Sub: https://${RecordSet}

  LoadBalancer:
    Description: The LoadBalancer
    Value: 
      Ref: LoadBalancer

  Cluster:
    Description: The Cluster
    Value: 
      Ref: Cluster

  Service:
    Description: The Service
    Value: 
      Ref: Service

  EC2Instance:
    Description: The EC2Instance PublicDnsName
    Value: 
      Fn::GetAtt: EC2Instance.Outputs.InstancePublicDnsName
          
  DashboardUrl:
    Description: The Dashboard url
    Value: 
      Fn::Sub: https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${Dashboard}

  PrivateDnsNamespaceUrl:
    Description: The internally url where the Service is accessible
    Value: 
      Fn::Sub: http://${ApplicationName}.internal-${HostedZoneName}:${ApplicationContainerPort}
