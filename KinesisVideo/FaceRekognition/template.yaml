AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - AWS::Serverless-2016-10-31
  - SamPolicyTemplateTranslator
Description: >
  FaceRekognition. Showcase a sample Kinesis Video Stream consumer to rekognize face in a video stream
Metadata:
  AWS::ServerlessRepo::Application:
    Name: "KinesisVideoStream-FaceRekognition"
    Description: Showcase a sample Kinesis Video Stream consumer to rekognize face in a video stream
    Author: rostskadat
    SpdxLicenseId: Apache-2.0
    ReadmeUrl: README.md
    Labels: [ "SAPC01", "KinesisVideoStream" ]
    HomePageUrl: https://github.com/rostskadat
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/rostskadat

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Parameters related to Kinesis Video Stream
        Parameters:
          - DataRetentionInHours
      - Label:
          default: Parameters related to Alerts
        Parameters:
          - EmailAddress

Parameters:

  DataRetentionInHours:
    Description: The number of hours that you want to retain the data in the stream
    Type: Number
    Default: 2

  EmailAddress:
    Description: The email address to whom alert about faces should be sent
    Type: String
    Default: rostskadat@gmail.com

Globals:

  Function:
    Handler: app.lambda_handler
    Runtime: python3.8
    Timeout: 30
    Layers:
      - Ref: FaceRekognitionLayer01
    Tags:
      PLATFORM: SAPC01

Resources:

  Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      Tags:
        - Key: PLATFORM
          Value: SAPC01

  KinesisVideoStream:
    Type: Custom::CfKinesisVideoStream
    Version: "1.0"
    Properties:
      ServiceToken:
        Fn::Sub: "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:CfKinesisVideoStream"
      # As per: https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/kinesisvideo.html#KinesisVideo.Client.create_stream
      DataRetentionInHours: 
        Ref: DataRetentionInHours
      Tags:
        PLATFORM: SAPC01

  RekognitionCollection:
    Type: Custom::CfRekognitionCollection
    Version: "1.0"
    Properties:
      ServiceToken:
        Fn::Sub: "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:CfRekognitionCollection"

  RekognitionStreamProcessor:
    Type: Custom::CfRekognitionStreamProcessor
    Version: "1.0"
    Properties:
      ServiceToken:
        Fn::Sub: "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:CfRekognitionStreamProcessor"
      Input:
        KinesisVideoStream:
          Arn: 
            Ref: KinesisVideoStream
      Output:
        KinesisDataStream:
          Arn: 
            Fn::GetAtt: EventMetadataStream.Arn
      RoleArn:
        Fn::GetAtt: RekognitionStreamProcessorRole.Arn
      Settings:
        FaceSearch:
          CollectionId: 
            Ref: RekognitionCollection
          FaceMatchThreshold: 85.5

  #
  # This stack contains the second leg of the whole processing chain:
  # https://s3-us-west-2.amazonaws.com/us-west-2.serverless-analytics/KinesisVideoRekognitionVideo-blog/deploy.yaml
  # However since the it complains about the S3 URL not beeing valid, no other options than copy & paste the template...
  #
  #KinesisVideoRekognitionVideo: 
  #  Type: AWS::CloudFormation::Stack
  #  Properties: 
  #    TemplateURL: https://s3-us-west-2.amazonaws.com/us-west-2.serverless-analytics/KinesisVideoRekognitionVideo-blog/deploy.yaml
  #    Parameters: 
  #      ApplicationName: "SAPC01-KinesisVideoStream"
  #      EmailAddress: 
  #        Ref: EmailAddress

  EventMetadataStream:
    Type: AWS::Kinesis::Stream
    Properties: 
      ShardCount: 1
      Tags:
        - Key: PLATFORM
          Value: SAPC01

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      Subscription:
        - Protocol: email
          Endpoint: 
            Ref: EmailAddress

  SNSPublishRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - SNSPublishMessagePolicy:
            TopicName:
              Fn::GetAtt: SNSTopic.TopicName
        - KinesisStreamReadPolicy:
            StreamName:
              Ref: EventMetadataStream

  RekognitionStreamProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: rekognition.amazonaws.com
            Action: sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonKinesisVideoStreamsFullAccess
        - arn:aws:iam::aws:policy/AmazonRekognitionFullAccess
        - arn:aws:iam::aws:policy/AmazonKinesisFullAccess

  FaceRekognitionLayer01:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: python3.8
    Properties:
      ContentUri: layers/FaceRekognitionLayer01
      CompatibleRuntimes:
        - python3.8
      RetentionPolicy: Delete

  AlertFunction: 
    Type: AWS::Serverless::Function
    Properties: 
      CodeUri: lambdas/AlertFunction
      Environment:
        Variables:
          SNS_TOPIC: 
            Ref: SNSTopic
      Events:
        StreamEvent:
          Type: Kinesis
          Properties:
            BatchSize: 10
            Enabled: true
            StartingPosition: TRIM_HORIZON
            Stream: 
              Fn::GetAtt: EventMetadataStream.Arn
      Role: 
        Fn::GetAtt: SNSPublishRole.Arn

Outputs:

  Bucket:
    Description: The Bucket
    Value: 
      Ref: Bucket

  RekognitionCollection:
    Description: The RekognitionCollection
    Value: 
      Ref: RekognitionCollection

  KinesisVideoStream:
    Description: The KinesisVideoStream
    Value: 
      Ref: KinesisVideoStream

  RekognitionStreamProcessor:
    Description: The RekognitionStreamProcessor
    Value: 
      Ref: RekognitionStreamProcessor

  KinesisDataStreamArn:
    Description: Kinesis Data Stream Arn (used in Stream Processer Input)
    Value: 
      Fn::GetAtt: EventMetadataStream.Arn

